// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Asuka/curdinfm/pb/newobj.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	Asuka/curdinfm/pb/newobj.proto

It has these top-level messages:
	NewObjMod
	NewObjMods
	NewObjModSearch
	Language
	RankIndexWithLang
	EmptyMessage
	ID
	PageOp
	MT4Account
*/
package pb

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	client "github.com/micro/go-micro/client"

	server "github.com/micro/go-micro/server"

	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 枚举
type LanguageType int32

const (
	LanguageType_zh_CN LanguageType = 0
	LanguageType_zh_HK LanguageType = 1
	LanguageType_en_US LanguageType = 2
)

var LanguageType_name = map[int32]string{
	0: "zh_CN",
	1: "zh_HK",
	2: "en_US",
}
var LanguageType_value = map[string]int32{
	"zh_CN": 0,
	"zh_HK": 1,
	"en_US": 2,
}

func (x LanguageType) String() string {
	return proto.EnumName(LanguageType_name, int32(x))
}
func (LanguageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 新的物体
type NewObjMod struct {
	ID         int32        `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID     int32        `protobuf:"varint,2,opt,name=UserID" json:"UserID,omitempty"`
	NickName   string       `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty"`
	Acc        *MT4Account  `protobuf:"bytes,4,opt,name=Acc" json:"Acc,omitempty"`
	CreateTime int64        `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty"`
	Lang       LanguageType `protobuf:"varint,6,opt,name=Lang,enum=pb.LanguageType" json:"Lang,omitempty"`
}

func (m *NewObjMod) Reset()                    { *m = NewObjMod{} }
func (m *NewObjMod) String() string            { return proto.CompactTextString(m) }
func (*NewObjMod) ProtoMessage()               {}
func (*NewObjMod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewObjMod) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *NewObjMod) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *NewObjMod) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *NewObjMod) GetAcc() *MT4Account {
	if m != nil {
		return m.Acc
	}
	return nil
}

func (m *NewObjMod) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *NewObjMod) GetLang() LanguageType {
	if m != nil {
		return m.Lang
	}
	return LanguageType_zh_CN
}

// 很多物体们
type NewObjMods struct {
	List []*NewObjMod `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
}

func (m *NewObjMods) Reset()                    { *m = NewObjMods{} }
func (m *NewObjMods) String() string            { return proto.CompactTextString(m) }
func (*NewObjMods) ProtoMessage()               {}
func (*NewObjMods) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NewObjMods) GetList() []*NewObjMod {
	if m != nil {
		return m.List
	}
	return nil
}

// 新物体的查询
type NewObjModSearch struct {
	UserID   int32   `protobuf:"varint,1,opt,name=UserID" json:"UserID,omitempty"`
	NickName string  `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	Account  string  `protobuf:"bytes,3,opt,name=Account" json:"Account,omitempty"`
	Page     *PageOp `protobuf:"bytes,4,opt,name=Page" json:"Page,omitempty"`
}

func (m *NewObjModSearch) Reset()                    { *m = NewObjModSearch{} }
func (m *NewObjModSearch) String() string            { return proto.CompactTextString(m) }
func (*NewObjModSearch) ProtoMessage()               {}
func (*NewObjModSearch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NewObjModSearch) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *NewObjModSearch) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *NewObjModSearch) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *NewObjModSearch) GetPage() *PageOp {
	if m != nil {
		return m.Page
	}
	return nil
}

type Language struct {
	Lang LanguageType `protobuf:"varint,1,opt,name=Lang,enum=pb.LanguageType" json:"Lang,omitempty"`
}

func (m *Language) Reset()                    { *m = Language{} }
func (m *Language) String() string            { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()               {}
func (*Language) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Language) GetLang() LanguageType {
	if m != nil {
		return m.Lang
	}
	return LanguageType_zh_CN
}

type RankIndexWithLang struct {
	RankIndex int32        `protobuf:"varint,1,opt,name=RankIndex" json:"RankIndex,omitempty"`
	Lang      LanguageType `protobuf:"varint,2,opt,name=Lang,enum=pb.LanguageType" json:"Lang,omitempty"`
}

func (m *RankIndexWithLang) Reset()                    { *m = RankIndexWithLang{} }
func (m *RankIndexWithLang) String() string            { return proto.CompactTextString(m) }
func (*RankIndexWithLang) ProtoMessage()               {}
func (*RankIndexWithLang) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RankIndexWithLang) GetRankIndex() int32 {
	if m != nil {
		return m.RankIndex
	}
	return 0
}

func (m *RankIndexWithLang) GetLang() LanguageType {
	if m != nil {
		return m.Lang
	}
	return LanguageType_zh_CN
}

// 为了测试
type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 数据库ID
type ID struct {
	ID int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ID) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type PageOp struct {
	OrderBy   string `protobuf:"bytes,1,opt,name=OrderBy" json:"OrderBy,omitempty"`
	IsDESC    bool   `protobuf:"varint,2,opt,name=IsDESC" json:"IsDESC,omitempty"`
	PageIndex int32  `protobuf:"varint,3,opt,name=PageIndex" json:"PageIndex,omitempty"`
	PageSize  int32  `protobuf:"varint,4,opt,name=PageSize" json:"PageSize,omitempty"`
}

func (m *PageOp) Reset()                    { *m = PageOp{} }
func (m *PageOp) String() string            { return proto.CompactTextString(m) }
func (*PageOp) ProtoMessage()               {}
func (*PageOp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PageOp) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *PageOp) GetIsDESC() bool {
	if m != nil {
		return m.IsDESC
	}
	return false
}

func (m *PageOp) GetPageIndex() int32 {
	if m != nil {
		return m.PageIndex
	}
	return 0
}

func (m *PageOp) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type MT4Account struct {
	BrokerID int32  `protobuf:"varint,1,opt,name=BrokerID" json:"BrokerID,omitempty"`
	Account  string `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty"`
}

func (m *MT4Account) Reset()                    { *m = MT4Account{} }
func (m *MT4Account) String() string            { return proto.CompactTextString(m) }
func (*MT4Account) ProtoMessage()               {}
func (*MT4Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MT4Account) GetBrokerID() int32 {
	if m != nil {
		return m.BrokerID
	}
	return 0
}

func (m *MT4Account) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func init() {
	proto.RegisterType((*NewObjMod)(nil), "pb.NewObjMod")
	proto.RegisterType((*NewObjMods)(nil), "pb.NewObjMods")
	proto.RegisterType((*NewObjModSearch)(nil), "pb.NewObjModSearch")
	proto.RegisterType((*Language)(nil), "pb.Language")
	proto.RegisterType((*RankIndexWithLang)(nil), "pb.RankIndexWithLang")
	proto.RegisterType((*EmptyMessage)(nil), "pb.EmptyMessage")
	proto.RegisterType((*ID)(nil), "pb.ID")
	proto.RegisterType((*PageOp)(nil), "pb.PageOp")
	proto.RegisterType((*MT4Account)(nil), "pb.MT4Account")
	proto.RegisterEnum("pb.LanguageType", LanguageType_name, LanguageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for XXXXSrv service

type XXXXSrvClient interface {
	// -----------------RPC 排行榜配置外语翻译文本 start -----------------
	// 增加
	AddNewObjMod(ctx context.Context, in *NewObjMod, opts ...client.CallOption) (*EmptyMessage, error)
	// 删除
	DelNewObjMod(ctx context.Context, in *ID, opts ...client.CallOption) (*EmptyMessage, error)
	// 查询
	GetNewObjMods(ctx context.Context, in *NewObjMod, opts ...client.CallOption) (*NewObjMods, error)
	// OA 修改 榜单配置对应的外语文本
	UpdateNewObjMod(ctx context.Context, in *NewObjMod, opts ...client.CallOption) (*EmptyMessage, error)
}

type xXXXSrvClient struct {
	c           client.Client
	serviceName string
}

func NewXXXXSrvClient(serviceName string, c client.Client) XXXXSrvClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pb"
	}
	return &xXXXSrvClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *xXXXSrvClient) AddNewObjMod(ctx context.Context, in *NewObjMod, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.serviceName, "XXXXSrv.AddNewObjMod", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXXXSrvClient) DelNewObjMod(ctx context.Context, in *ID, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.serviceName, "XXXXSrv.DelNewObjMod", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXXXSrvClient) GetNewObjMods(ctx context.Context, in *NewObjMod, opts ...client.CallOption) (*NewObjMods, error) {
	req := c.c.NewRequest(c.serviceName, "XXXXSrv.GetNewObjMods", in)
	out := new(NewObjMods)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXXXSrvClient) UpdateNewObjMod(ctx context.Context, in *NewObjMod, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.serviceName, "XXXXSrv.UpdateNewObjMod", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for XXXXSrv service

type XXXXSrvHandler interface {
	// -----------------RPC 排行榜配置外语翻译文本 start -----------------
	// 增加
	AddNewObjMod(context.Context, *NewObjMod, *EmptyMessage) error
	// 删除
	DelNewObjMod(context.Context, *ID, *EmptyMessage) error
	// 查询
	GetNewObjMods(context.Context, *NewObjMod, *NewObjMods) error
	// OA 修改 榜单配置对应的外语文本
	UpdateNewObjMod(context.Context, *NewObjMod, *EmptyMessage) error
}

func RegisterXXXXSrvHandler(s server.Server, hdlr XXXXSrvHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&XXXXSrv{hdlr}, opts...))
}

type XXXXSrv struct {
	XXXXSrvHandler
}

func (h *XXXXSrv) AddNewObjMod(ctx context.Context, in *NewObjMod, out *EmptyMessage) error {
	return h.XXXXSrvHandler.AddNewObjMod(ctx, in, out)
}

func (h *XXXXSrv) DelNewObjMod(ctx context.Context, in *ID, out *EmptyMessage) error {
	return h.XXXXSrvHandler.DelNewObjMod(ctx, in, out)
}

func (h *XXXXSrv) GetNewObjMods(ctx context.Context, in *NewObjMod, out *NewObjMods) error {
	return h.XXXXSrvHandler.GetNewObjMods(ctx, in, out)
}

func (h *XXXXSrv) UpdateNewObjMod(ctx context.Context, in *NewObjMod, out *EmptyMessage) error {
	return h.XXXXSrvHandler.UpdateNewObjMod(ctx, in, out)
}

func init() { proto.RegisterFile("Asuka/curdinfm/pb/newobj.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xda, 0x4c,
	0x14, 0x65, 0x6c, 0x70, 0xf0, 0x0d, 0x71, 0xf8, 0x46, 0x9f, 0x2a, 0x2b, 0xaa, 0x90, 0x6b, 0x75,
	0x61, 0x65, 0x81, 0x53, 0x9a, 0x17, 0x00, 0x1c, 0xb5, 0x56, 0x03, 0x54, 0x63, 0x50, 0xd8, 0x45,
	0xfe, 0x99, 0x82, 0x43, 0xb1, 0x2d, 0xdb, 0x34, 0x25, 0x9b, 0x3e, 0x56, 0x5f, 0xa3, 0x8f, 0x54,
	0x8d, 0x31, 0x83, 0x89, 0xda, 0x48, 0xdd, 0xf9, 0x9c, 0x3b, 0x73, 0x7d, 0xce, 0x3d, 0x77, 0xa0,
	0xd3, 0xcf, 0x36, 0x2b, 0xd7, 0xf4, 0x37, 0x69, 0x10, 0x46, 0x5f, 0xd6, 0x66, 0xe2, 0x99, 0x11,
	0x7d, 0x8c, 0xbd, 0x87, 0x6e, 0x92, 0xc6, 0x79, 0x8c, 0x85, 0xc4, 0xd3, 0x7f, 0x22, 0x90, 0xc7,
	0xf4, 0x71, 0xe2, 0x3d, 0x8c, 0xe2, 0x00, 0x2b, 0x20, 0xd8, 0x96, 0x8a, 0x34, 0x64, 0x34, 0x88,
	0x60, 0x5b, 0xf8, 0x15, 0x48, 0xb3, 0x8c, 0xa6, 0xb6, 0xa5, 0x0a, 0x05, 0x57, 0x22, 0x7c, 0x01,
	0xcd, 0x71, 0xe8, 0xaf, 0xc6, 0xee, 0x9a, 0xaa, 0xa2, 0x86, 0x0c, 0x99, 0x70, 0x8c, 0x35, 0x10,
	0xfb, 0xbe, 0xaf, 0xd6, 0x35, 0x64, 0x9c, 0xf6, 0x94, 0x6e, 0xe2, 0x75, 0x47, 0xd3, 0xeb, 0xbe,
	0xef, 0xc7, 0x9b, 0x28, 0x27, 0xac, 0x84, 0x3b, 0x00, 0xc3, 0x94, 0xba, 0x39, 0x9d, 0x86, 0x6b,
	0xaa, 0x36, 0x34, 0x64, 0x88, 0xa4, 0xc2, 0xe0, 0xb7, 0x50, 0xbf, 0x75, 0xa3, 0x85, 0x2a, 0x69,
	0xc8, 0x50, 0x7a, 0x6d, 0xd6, 0x82, 0xe1, 0x8d, 0xbb, 0xa0, 0xd3, 0x6d, 0x42, 0x49, 0x51, 0xd5,
	0x4d, 0x00, 0x2e, 0x3c, 0xc3, 0x6f, 0xa0, 0x7e, 0x1b, 0x66, 0xb9, 0x8a, 0x34, 0xd1, 0x38, 0xed,
	0x9d, 0xb1, 0x3b, 0xbc, 0x4a, 0x8a, 0x92, 0xfe, 0x03, 0xce, 0x39, 0xe5, 0x50, 0x37, 0xf5, 0x97,
	0x15, 0x7f, 0xe8, 0xaf, 0xfe, 0x84, 0x67, 0xfe, 0x54, 0x38, 0x29, 0xdd, 0x94, 0xd6, 0xf7, 0x10,
	0x77, 0xa0, 0xfe, 0xd9, 0x5d, 0xd0, 0xd2, 0x3a, 0x30, 0x0d, 0x0c, 0x4f, 0x12, 0x52, 0xf0, 0xfa,
	0x15, 0x34, 0xf7, 0x3e, 0xb8, 0x47, 0xf4, 0xa2, 0xc7, 0x3b, 0xf8, 0x8f, 0xb8, 0xd1, 0xca, 0x8e,
	0x02, 0xfa, 0xfd, 0x2e, 0xcc, 0x97, 0x8c, 0xc4, 0xaf, 0x41, 0xe6, 0x64, 0xa9, 0xfb, 0x40, 0xf0,
	0xc6, 0xc2, 0x8b, 0x8d, 0x15, 0x68, 0xdd, 0xac, 0x93, 0x7c, 0x3b, 0xa2, 0x59, 0xc6, 0xa4, 0xfd,
	0xcf, 0x82, 0xaf, 0xc4, 0x2f, 0xb2, 0xf8, 0xf5, 0x1c, 0xa4, 0x9d, 0x01, 0x66, 0x7a, 0x92, 0x06,
	0x34, 0x1d, 0x6c, 0x8b, 0xb2, 0x4c, 0xf6, 0x90, 0x8d, 0xd0, 0xce, 0xac, 0x1b, 0x67, 0x58, 0xfc,
	0xb1, 0x49, 0x4a, 0xc4, 0x54, 0xb2, 0xbb, 0x3b, 0x95, 0xe2, 0x4e, 0x25, 0x27, 0xd8, 0x80, 0x19,
	0x70, 0xc2, 0xa7, 0xdd, 0xb8, 0x1a, 0x84, 0x63, 0x7d, 0x00, 0x70, 0xd8, 0x18, 0x76, 0x72, 0x90,
	0xc6, 0xab, 0x4a, 0x48, 0x1c, 0x57, 0xa3, 0x10, 0x8e, 0xa2, 0xb8, 0x34, 0xa1, 0x55, 0x75, 0x8d,
	0x65, 0x68, 0x3c, 0x2d, 0xef, 0x87, 0xe3, 0x76, 0xad, 0xfc, 0xfc, 0xf8, 0xa9, 0x8d, 0xd8, 0x27,
	0x8d, 0xee, 0x67, 0x4e, 0x5b, 0xe8, 0xfd, 0x42, 0x70, 0x32, 0x9f, 0xcf, 0xe7, 0x4e, 0xfa, 0x0d,
	0xbf, 0x83, 0x56, 0x3f, 0x08, 0x0e, 0xaf, 0xe2, 0x78, 0x9b, 0x2e, 0x8a, 0x99, 0x1e, 0x4d, 0xaf,
	0x86, 0x2f, 0xa1, 0x65, 0xd1, 0xaf, 0x87, 0x2b, 0x12, 0x3b, 0x63, 0x5b, 0x7f, 0x3c, 0x7b, 0x05,
	0x67, 0x1f, 0x68, 0x5e, 0xd9, 0xdd, 0x67, 0xfd, 0x95, 0x23, 0x98, 0xe9, 0x35, 0x7c, 0x0d, 0xe7,
	0xb3, 0x24, 0x70, 0x73, 0xfa, 0x2f, 0x9a, 0x3c, 0xa9, 0x78, 0xe5, 0xef, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xdd, 0x79, 0x57, 0xec, 0x07, 0x04, 0x00, 0x00,
}
